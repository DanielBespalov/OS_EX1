        -:    0:Source:Q4.c
        -:    0:Graph:Q4.gcno
        -:    0:Data:Q4.gcda
        -:    0:Runs:2
        -:    1:#include <limits.h>
        -:    2:#include <stdbool.h>
        -:    3:#include <stdio.h>
        -:    4:#include <stdlib.h>
        -:    5:#include <string.h>
        -:    6:
        -:    7:// A utility function to find the vertex with minimum distance value
        -:    8:// from the set of vertices not yet included in the shortest path tree
        1:    9:int minDistance(long dist[], bool sptSet[], int V) {
        1:   10:    int min = INT_MAX;
        1:   11:    int min_index = -1;
        -:   12:
        3:   13:    for (int v = 0; v < V; v++) {
        2:   14:        if (!sptSet[v] && dist[v] <= min) {
        1:   15:            min = dist[v];
        1:   16:            min_index = v;
        -:   17:        }
        -:   18:    }
        -:   19:
        1:   20:    return min_index;
        -:   21:}
        -:   22:
        -:   23:// A utility function to print the constructed distance array
        1:   24:void printSolution(long dist[], int V) {
        1:   25:    printf("Vertex \t\t Distance from Source\n");
        3:   26:    for (int i = 0; i < V; i++) {
        2:   27:        printf("%d \t\t\t\t %ld\n", i, dist[i]);
        -:   28:    }
        1:   29:}
        -:   30:
        -:   31:// Function that implements Dijkstra's single source shortest path algorithm
        -:   32:// for a graph represented using adjacency matrix representation
        1:   33:void dijkstra(int **graph, int src, int V) {
        1:   34:    long dist[V];    // The output array. dist[i] will hold the shortest distance from src to i
        1:   35:    bool sptSet[V];  // sptSet[i] will be true if vertex i is included in the shortest path tree or shortest distance from src to i is finalized
        -:   36:
        -:   37:    // Initialize all distances as INFINITE and sptSet[] as false
        3:   38:    for (int i = 0; i < V; i++) {
        2:   39:        dist[i] = LONG_MAX;
        2:   40:        sptSet[i] = false;
        -:   41:    }
        -:   42:
        -:   43:    // Distance of source vertex from itself is always 0
        1:   44:    dist[src] = 0;
        -:   45:
        -:   46:    // Find the shortest path for all vertices
        2:   47:    for (int count = 0; count < V - 1; count++) {
        1:   48:        int u = minDistance(dist, sptSet, V);
        1:   49:        sptSet[u] = true;
        -:   50:
        3:   51:        for (int v = 0; v < V; v++) {
        2:   52:            if (!sptSet[v] && graph[u][v] && dist[u] <= INT_MAX && dist[u] + graph[u][v] < dist[v]) {
        1:   53:                dist[v] = dist[u] + graph[u][v];
        -:   54:            }
        -:   55:        }
        -:   56:    }
        -:   57:
        -:   58:    // Print the constructed distance array
        1:   59:    printSolution(dist, V);
        1:   60:}
        -:   61:
        3:   62:bool readGraph(int **graph, int V) {
        3:   63:    printf("Enter the adjacency matrix for the graph (%dx%d) or type 'exit' to quit:\n", V, V);
        -:   64:
        5:   65:    for (int i = 0; i < V; i++) {
        8:   66:        for (int j = 0; j < V; j++) {
        -:   67:            char input[20];
        6:   68:            if (scanf("%s", input) != 1) {
    #####:   69:                fprintf(stderr, "Invalid input. Please enter integers only.\n");
       2*:   70:                return false;
        -:   71:            }
        -:   72:            char *endptr;
        6:   73:            long value = strtol(input, &endptr, 10);
        6:   74:            if (*endptr != '\0' || value < 0 || value > INT_MAX) {
        2:   75:                return false;
        -:   76:            }
        4:   77:            graph[i][j] = (int)value;
        -:   78:        }
        -:   79:    }
        -:   80:
        1:   81:    return true;
        -:   82:}
        -:   83:
        3:   84:int **allocateGraph(int V) {
        3:   85:    int **graph = (int **)malloc(V * sizeof(int *));
       10:   86:    for (int i = 0; i < V; i++) {
        7:   87:        graph[i] = (int *)malloc(V * sizeof(int));
        -:   88:    }
        3:   89:    return graph;
        -:   90:}
        -:   91:
        3:   92:void freeGraph(int **graph, int V) {
       10:   93:    for (int i = 0; i < V; i++) {
        7:   94:        free(graph[i]);
        -:   95:    }
        3:   96:    free(graph);
        3:   97:}
        -:   98:
        7:   99:int main() {
        5:  100:    while (true) {
        -:  101:        int V;
        7:  102:        printf("Enter the number of vertices in the graph (or type 0 to exit): ");
        7:  103:        if (scanf("%d", &V) != 1 || V < 0 || V > INT_MAX) {
        2:  104:            fprintf(stderr, "Invalid number of vertices.\n");
        -:  105:            // Clear the input buffer
        3:  106:            while (getchar() != '\n');
        4:  107:            continue;
        -:  108:        }
        -:  109:
        5:  110:        if (V == 0) {
        2:  111:            break;
        -:  112:        }
        -:  113:
        3:  114:        int **graph = allocateGraph(V);
        -:  115:
        3:  116:        if (!readGraph(graph, V)) {
        2:  117:            printf("Failed to read the graph. Please try again.\n");
        2:  118:            freeGraph(graph, V);
        -:  119:            // Clear the input buffer
        2:  120:            while (getchar() != '\n');
        2:  121:            continue;
        -:  122:        }
        -:  123:
        -:  124:        // Run Dijkstra's algorithm from source vertex 0
        1:  125:        dijkstra(graph, 0, V);
        1:  126:        freeGraph(graph, V);
        -:  127:    }
        -:  128:
        2:  129:    return 0;
        -:  130:}
